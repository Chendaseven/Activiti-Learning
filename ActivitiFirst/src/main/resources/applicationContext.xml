<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
           http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
           http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.2.xsd
           http://www.springframework.org/schema/aop 
           http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
           http://www.springframework.org/schema/tx 
           http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">

<!-- ==================IOC 或 DI 部分采用注解方式，自动扫描与装配 bean ========================= -->
	<context:component-scan base-package="com.cqupt" /> 
	<!-- AOP:配置自动为匹配 aspectJ 注解的 Java 类生成代理对象.
		proxy-target-class="true": 在Spring中强制使用CGLIB生成目标类的代理类  
		因为默认情况下，Spring使用JDK动态代理生成目标类的代理类 -->
	<aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy>
	
	
<!-- ==================配置数据源=================================  -->
	<!-- 1. 加载外部的 jdbc.propertites 配置文件  -->
	<context:property-placeholder location="classpath:config.properties" />
	
	
	<!-- 2. 利用 c3p0 定义数据库连接池 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${driverClass}" /> <!-- 定义数据库驱动 -->
		<property name="jdbcUrl" value="${jdbcUrl}" /> <!-- 定义数据库URL -->
		<property name="user" value="${user}" /> <!-- 定义数据库的用户名 -->
		<property name="password" value="${password}" /> <!-- 定义数据库的密码 -->

		<!-- c3p0连接其他配置 -->	
		<property name="minPoolSize" value="1" />
		<property name="maxPoolSize" value="40" />
		<property name="maxIdleTime" value="1800" />
		<property name="acquireIncrement" value="2" />
		<property name="maxStatements" value="0" />
		<property name="initialPoolSize" value="2" />
		<property name="idleConnectionTestPeriod" value="1800" />
		<property name="acquireRetryAttempts" value="30" />
		<property name="acquireRetryDelay" value="100" />
		<property name="breakAfterAcquireFailure" value="true" />
		<property name="testConnectionOnCheckout" value="false" />
	</bean>
	
	<!-- 3. 配置 Hibernate 的 SessionFactory -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" /> <!-- 定义SessionFactory必须注入dataSource -->
		<property name="configLocation" value="classpath:hibernate.cfg.xml" /> <!-- 定义Hibernate的配置文件hibernate.cfg.xml -->
	</bean>
	
	
<!-- ==================配置 spring 的声明式事务管理器================================= -->
	<!-- 1. 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	
	<!-- 2. 采用注解的方式 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
<!-- ==================== Activiti工作流 ===================== -->
	<!-- 1. spring负责创建流程引擎的配置文件 -->  
    <bean id="processEngineConfiguration" class="org.activiti.spring.SpringProcessEngineConfiguration">  
        <property name="dataSource" ref="dataSource" /> <!--配置数据源 -->  
        <property name="transactionManager" ref="transactionManager" /> <!-- 配置事务管理器 -->
        <property name="databaseSchemaUpdate" value="true" /> <!-- 设置建表策略，如果没有表，自动创建表 --> 
        <property name="jobExecutorActivate" value="false" /> <!-- 是否启动jobExecutor --> 
        <!-- 发布流程生成图片是正常显示中文 -->
        <property name="activityFontName" value="宋体"/>
        <property name="labelFontName" value="宋体"/>
    </bean>  
  
  	<!-- 2. 创建流程引擎对象 -->
    <bean id="processEngine" class="org.activiti.spring.ProcessEngineFactoryBean">  
        <property name="processEngineConfiguration" ref="processEngineConfiguration" />  
    </bean>  
    
	<!-- 3. 由流程引擎对象，提供的方法，创建项目中使用的Activiti工作流的Service -->
    <!--  相当于下面的代码  RepositoryServicie repositoryService = processEngine.getRepositoryService(); -->
    <bean id="repositoryService" factory-bean="processEngine" factory-method="getRepositoryService"/>  
    <bean id="runtimeService" factory-bean="processEngine" factory-method="getRuntimeService"/>  
    <bean id="taskService" factory-bean="processEngine" factory-method="getTaskService"/>  
    <bean id="historyService" factory-bean="processEngine" factory-method="getHistoryService"/>  
    <bean id="formService" factory-bean="processEngine" factory-method="getFormService"/>  
    <bean id="identityService" factory-bean="processEngine" factory-method="getIdentityService"/>  
    <bean id="managementService" factory-bean="processEngine" factory-method="getManagementService"/>
	
	
	<task:annotation-driven/>  
   
    <bean id = "ServiceLog" class="com.cqupt.service.channel.crm.ServiceLog"/>
    <bean id = "serviceView" class="com.cqupt.service.channel.ServiceView"/>
    <bean id = "createNewTable" class="com.cqupt.service.timing.creatNewTable"/>
    <bean id = "allowanceTask" class="com.cqupt.service.timing.AllowanceTask"/>

    <task:scheduled-tasks> 
    	 <!-- 每月7日00:00定时送上月账期数据，并转移接口数据到历史表中   !!!!保证只有一台服务器执行-->
   		 <task:scheduled ref="allowanceTask" method="settleSAccounts" cron="01 00 00 7 * ?"/> 
   		  <!-- 每月21日00:00定时送上月预估类账期数据，并转移接口数据到历史表中   !!!!保证只有一台服务器执行-->
   		 <task:scheduled ref="allowanceTask" method="settleSAccounts" cron="01 00 00 20 * ?"/>
   		 <!-- 每周23:00定时删除补贴流程临时的Excel文件目录 -->
   		 <task:scheduled ref="allowanceTask" method="deleteAll" cron="0 0 23 ? * SUN"/>
   		 <!-- 每天早上5点定时清理失效方案 （一台服务器）-->
   		 <task:scheduled ref="allowanceTask" method="invalidatePlan" cron="0 0 5 ? * *"/>
			
    	 <!-- <task:scheduled ref="createNewTable" method="createNewOatable" cron="0 31 11 * * ?"/> -->  
         <task:scheduled ref="serviceView" method="maintainViewChannel" cron="0 30 2 * * ?"/>           
 	</task:scheduled-tasks> 
	<!-- 工作日（周一到周五）时期，朝九晚六发送超时提醒 -->
	<!-- <task:scheduled-tasks>  
         <task:scheduled ref="remind" method="sendRemind" cron="0 0/59 9-18 ? *  MON-FRI "/>  
 	</task:scheduled-tasks> -->
 	
 	<!-- OA用户同步 -->
 <!-- 	<task:scheduled-tasks>
 		<task:scheduled ref="userService" method="refreshOaUsersInfo" cron="0 0 1 * * ?"/>
 	</task:scheduled-tasks>  -->
 	
 	<!-- OA部门同步-->
 	<!-- <task:scheduled-tasks>
 		<task:scheduled ref="departmentService" method="refreshOaDeptsInfo" cron="0 0 1 * * ?"/>
 	</task:scheduled-tasks>  -->
 	
 	<!-- OA用户同步然后同步到用户表 -->
 	<!-- <task:scheduled-tasks>
 		<task:scheduled ref="synchronizeBasicData" method="synchronizeUsers" cron="0 0 2 * * ?"/>
 	</task:scheduled-tasks>  -->
 	
 	<!-- OA部门同步然后同步到部门表 -->
 	<!-- <task:scheduled-tasks>
 		<task:scheduled ref="synchronizeBasicData" method="synchronizeDept" cron="0 0 2 * * ?"/>
 	</task:scheduled-tasks>  -->
 	
 
 	
</beans>
